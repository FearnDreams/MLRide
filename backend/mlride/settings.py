"""
Django settings for mlride project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import platform
import logging

# 设置Docker连接环境变量
if platform.system().lower() == 'windows':
    # 在Windows上，通过TCP连接Docker (本地端口2375)
    os.environ.setdefault('DOCKER_HOST', 'tcp://localhost:2375')
else:
    # 在Unix/Linux上，使用默认的套接字
    os.environ.setdefault('DOCKER_HOST', 'unix:///var/run/docker.sock')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-g#*qexdue5f9_o9i*m&w^4112(5ra0!n0w498vh+m*f@_k^y6q"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'authentication',
    'rest_framework',
    'rest_framework.authtoken',  # 添加Token认证
    'corsheaders',
    'container',  # 添加container应用
    'project',  # 添加project应用
    'jupyterapp',  # 添加jupyterapp应用
    'dataset',  # 添加dataset应用
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # CORS中间件必须放在最前面
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
]

# 禁用Django默认的X-Frame-Options中间件，确保我们自定义的设置生效
MIDDLEWARE = [
    middleware for middleware in MIDDLEWARE 
    if middleware != 'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

# 添加自定义安全中间件替代Django默认中间件
MIDDLEWARE.append('jupyterapp.middleware.CustomSecurityMiddleware')

ROOT_URLCONF = "mlride.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mlride.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "mlride",
        "USER": "root",
        "PASSWORD": "851262",
        "HOST": "localhost",
        "PORT": "3306",
        "OPTIONS": {
            "init_command": "SET GLOBAL max_allowed_packet=67108864",  # 设置为64MB
            "charset": "utf8mb4",
            # 防止MySQL连接断开
            "autocommit": True,
            "connect_timeout": 60,
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# 媒体文件配置
MEDIA_URL = '/media/'  # 媒体文件URL前缀
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 媒体文件存储路径

# 项目工作区根目录
WORKSPACE_DIR = os.path.join(BASE_DIR, 'workspaces')
# 确保工作区目录存在
os.makedirs(WORKSPACE_DIR, exist_ok=True)

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 自定义用户模型
AUTH_USER_MODEL = 'authentication.User'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # 默认允许所有用户访问
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}

# CORS设置
CORS_ALLOW_ALL_ORIGINS = True  # 开发环境临时允许所有源
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:5175",  # 添加新端口
    "http://127.0.0.1:5175",
]
CORS_ALLOWED_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF设置
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:5175",  # 添加新端口
    "http://127.0.0.1:5175",
]
CSRF_COOKIE_DOMAIN = None
CSRF_COOKIE_HTTPONLY = False  # 允许JavaScript访问CSRF Cookie
CSRF_COOKIE_SECURE = False  # 允许通过HTTP发送CSRF Cookie
CSRF_COOKIE_SAMESITE = 'Lax'  # 同站点请求保护级别
CSRF_USE_SESSIONS = False  # 不使用会话存储CSRF令牌
CSRF_COOKIE_NAME = 'csrftoken'

# Session设置
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SECURE = False  # 开发环境设置为False

# STATIC_ROOT 设置
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# 配置日志记录
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG', # 将控制台日志级别设置为DEBUG
            'class': 'logging.StreamHandler',
            'formatter': 'verbose' # 使用更详细的格式
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django_debug.log'), # 日志文件路径
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO', # Django自身的日志级别
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'container': { # container应用的日志
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'project': { # project应用的日志
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'jupyterapp': { # jupyterapp应用的日志
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'docker_helper': { # docker_helper的日志
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': { # 根日志记录器，捕获未明确指定的日志
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
    }
}

# 确保logs目录存在
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)

# 增加请求头和请求体大小限制设置
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024 * 1024  # 10GB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000
DATA_UPLOAD_MAX_NUMBER_FILES = 100

# 请求头大小限制 (覆盖默认值)
# 解决"431 Request Header Fields Too Large"错误
FILE_UPLOAD_MAX_MEMORY_SIZE = 2 * 1024 * 1024 * 1024  # 2GB

# 如果文件大于2GB，将使用磁盘存储而不是内存
# 启用分块上传，对于大于2GB的文件将通过分块处理
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

# 增加超时设置
# 超时时间，单位秒
TIMEOUT = 120 

# 增加会话cookie设置，减少cookie大小
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SECURE = False  # 开发环境设为False，生产环境设为True
SESSION_COOKIE_HTTPONLY = True

# X-Frame-Options设置，允许在iframe中嵌入
X_FRAME_OPTIONS = 'ALLOWALL'
SECURE_CONTENT_TYPE_NOSNIFF = False
